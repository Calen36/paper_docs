from .models_cats import BaseHierarchicalProperty
from django.db import models
from mptt.models import MPTTModel, TreeForeignKey, TreeManyToManyField, TreeManager

my_indent = "‚ÄÄ‚ÄÄ‚ÄÄ"


class CounterpartyType(models.Model):
    index = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=127)
    mini = models.CharField(max_length=16, blank=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'
        verbose_name_plural = '–¢–∏–ø—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤'


class Counterparty(BaseHierarchicalProperty):
    type = models.ForeignKey('CounterpartyType', default=3, on_delete=models.CASCADE, blank=True, null=True, )
    name = models.CharField(max_length=255)
    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children', verbose_name='–û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    prev_org = TreeForeignKey('Organization', on_delete=models.CASCADE, null=True, blank=True, related_name='renamed', verbose_name='–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    prev_pos = TreeForeignKey('Person', on_delete=models.CASCADE, null=True, blank=True, related_name='relocated', verbose_name='–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è')

    def get_full_name(self):
        if self.parent:
            return f"{str(self.parent)} {self.name}"
        return self.name

    def get_fancy_name(self):
        return f"{self.type.mini}  {self.name}"

    get_fancy_name.short_description = '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã'

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'
        verbose_name_plural = '      –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã'


class Organization(Counterparty):

    def get_fancy_name(self):
        return super(Organization, self).get_fancy_name()
    get_fancy_name.short_description = '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'

    class Meta:
        proxy = True
        verbose_name = '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é'
        verbose_name_plural = f'     {my_indent}üè¶ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'

    def save(self, *args, **kwargs):
        self.type = CounterpartyType.objects.get(pk=1)
        super(Organization, self).save()


class Position(Counterparty):
    class Meta:
        proxy = True
        verbose_name = '–¥–æ–ª–∂–æ—Å—Ç—å'
        verbose_name_plural = f'    {my_indent}–î–æ–ª–∂–Ω–æ—Å—Ç–∏'

    def save(self, *args, **kwargs):
        self.type = CounterpartyType.objects.get(pk=2)
        super(Position, self).save()

    def __str__(self):
        return f"{self.name} ({self.parent.name})"

    def get_full_name(self):
        if self.parent:
                return f"{self.parent.name} ‚ù± {self.name}"
        return f'ü†∂ {self.name}'

    get_full_name.short_description = '–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏'


class Person(Counterparty):
    class Meta:
        proxy = True
        verbose_name = '–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
        verbose_name_plural = f'   {my_indent}üë§ –õ–∏—Ü–∞'

    def save(self, *args, **kwargs):
        self.type = CounterpartyType.objects.get(pk=3)
        super(Person, self).save()

    def get_full_name(self):
        if self.parent:
            if self.parent.parent:
                return f"{self.type.mini} {self.parent.name} {self.name} ({self.parent.parent.name})"
        return f'ü†∂ {self.name}'

    get_full_name.short_description = '–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –ª–∏—Ü–∞'



