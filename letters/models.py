import re

from django.db import models
from django.utils.safestring import mark_safe
from mptt.models import MPTTModel, TreeForeignKey, TreeManyToManyField


# –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é django-admin –∏–Ω–¥–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ —Ç–∞–±–∞–º–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ—Ä—è–¥–æ–∫ –ø—É–∫–Ω–∫—Ç–æ–≤ –º–µ–Ω—é)
menu_indent = "‚ÄÄ‚ÄÄ‚ÄÄ"

"""___________________________–ú–û–î–ï–õ–ò –ö–ê–¢–ï–ì–û–†–ò–ô___________________________"""


class OutgoingType(models.Model):
    name = models.CharField(max_length=64, unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–¢–∏–ø –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –ø–∏—Å—å–º–∞'
        verbose_name_plural = '–¢–∏–ø—ã –∏—Å—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º'


class WayOfDelivery(models.Model):
    """–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –ø–∏—Å—å–º–∞ (–ø–æ—á—Ç–∞, –∫—É—Ä—å–µ—Ä, –ª–∏—á–Ω–æ)"""
    name = models.CharField(max_length=64, unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–°–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏'
        verbose_name_plural = '–°–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏'


class Executor(models.Model):
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤–Ω—É—Ç—Ä–∏ –Ω–∞—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
    surname = models.CharField(max_length=64, verbose_name='–§–∞–º–∏–ª–∏—è')
    name = models.CharField(max_length=64, verbose_name='–ò–º—è')
    patronimic = models.CharField(max_length=64, verbose_name='–û—Ç—á–µ—Å—Ç–≤–æ')

    def __str__(self):
        n = str(self.name)[0].upper() if str(self.name) else ''
        p = str(self.patronimic)[0].upper() if str(self.patronimic) else ''
        return f"{self.surname} {n}.{p}."

    class Meta:
        verbose_name = '–ü–æ–¥–ø–∏—Å–∞–Ω–æ/–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å'
        verbose_name_plural = '–ü–æ–¥–ø–∏—Å–∞–Ω–æ/–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏'
        ordering = ('surname', 'name')


class CadNum(models.Model):
    """–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä"""
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', unique=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–π –Ω–æ–º–µ—Ä'
        verbose_name_plural = '–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞'


class BaseHierarchicalProperty(MPTTModel):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ø–∏—Å–µ–º"""
    name = models.CharField(max_length=255, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children', verbose_name='–û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    def __str__(self):
        if self.parent:
            return f"{str(self.parent)} ‚ä≥ {self.name}"
        return self.name

    class Meta:
        abstract = True


class GeoTag(BaseHierarchicalProperty):
    """–ì–µ–æ—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã. –ú–æ–≥—É—Ç –±—ã—Ç—å –≤–ª–æ–∂–µ–Ω—ã –æ–¥–∏–Ω –≤ –¥—Ä—É–≥–æ–π.
    –ù–∞–ø—Ä–∏–º–µ—Ä: '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π', '–ê–±–∏–Ω—Å–∫–∏–π —Ä-–Ω', '–ù–µ—Ñ—Ç–µ–≥–æ—Ä—Å–∫–æ–µ –≥.–ø.' """
    class Meta:
        verbose_name = '–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞'
        verbose_name_plural = '–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞'

    def get_extension_url(self):
        url = f"/admin/letters/geotag/{self.pk}"
        return url

    def get_link_name(self):
        return mark_safe(f"<a href={self.get_extension_url()}>{self.name}</a>")

    get_link_name.short_description = ''


class Thematics(BaseHierarchicalProperty):
    """–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –¥–ª—è –ø–∏—Å—å–º–∞. –ú–æ–≥—É—Ç –±—ã—Ç—å –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ –≤–ª–æ–∂–µ–Ω—ã –æ–¥–Ω–∞ –≤ –¥—Ä—É–≥—É—é.
    –ü—Ä–∏–º–µ—Ä: '–ù–∞—Ä—É—à–µ–Ω–∏—è –≤ –õ–µ—Å–Ω–æ–º —Ñ–æ–Ω–¥–µ' <- '–ù–µ–∑–∞–∫–æ–Ω–Ω—ã–µ –≤—ã—Ä—É–±–∫–∏' <- '–í—ã—Ä—É–±–∫–∞ –≤ –®–∞–±–∞–Ω–æ–≤—Å–∫–æ–º –ª–µ—Å–Ω–∏—á–µ—Å—Ç–≤–µ' """
    class Meta:
        verbose_name = '–¢–µ–º–∞—Ç–∏–∫–∞'
        verbose_name_plural = ' –¢–µ–º–∞—Ç–∏–∫–∏'

    def get_extension_url(self):
        url = f"/admin/letters/thematics/{self.pk}"
        return url

    def get_link_name(self):
        return mark_safe(f"<a href={self.get_extension_url()}>{self.name}</a>")

    get_link_name.short_description = ''


class Forestry(BaseHierarchicalProperty):
    """–û–±—ä–µ–∫—Ç—ã –ª–µ—Å–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞. –ú–æ–≥—É—Ç –±—ã—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏ –≤–ª–æ–∂–µ–Ω—ã –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∞."""
    class Meta:
        verbose_name = '–û–±—ä–µ–∫—Ç –õ–µ—Å–Ω–æ–≥–æ –§–æ–Ω–¥–∞'
        verbose_name_plural = '–û–±—ä–µ–∫—Ç—ã –õ–µ—Å–Ω–æ–≥–æ –§–æ–Ω–¥–∞'

    def get_extension_url(self):
        url = f"/admin/letters/forestry/{self.pk}"
        return url

    def get_link_name(self):
        return mark_safe(f"<a href={self.get_extension_url()}>{self.name}</a>")

    get_link_name.short_description = ''


class WaterObj(BaseHierarchicalProperty):
    """–í–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. –ú–æ–≥—É—Ç –±—ã—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏ –≤–ª–æ–∂–µ–Ω—ã –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–∞."""
    class Meta:
        verbose_name = '–í–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç'
        verbose_name_plural = '–í–æ–¥–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã'

    def get_extension_url(self):
        url = f"/admin/letters/waterobj/{self.pk}"
        return url

    def get_link_name(self):
        return mark_safe(f"<a href={self.get_extension_url()}>{self.name}</a>")

    get_link_name.short_description = ''


"""___________________________–ú–û–î–ï–õ–ò –ö–û–ù–¢–†–ê–ì–ï–ù–¢–û–í___________________________"""


class CounterpartyType(models.Model):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞. –í–∞—Ä–∏–∞–Ω—Ç—ã: –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è, –î–æ–ª–∂–Ω–æ—Å—Ç—å, –õ–∏—Ü–æ"""
    index = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=127)
    mini = models.CharField(max_length=16, blank=True)
    url = models.CharField(max_length=127)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞'
        verbose_name_plural = '–¢–∏–ø—ã –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤'


class Counterparty(BaseHierarchicalProperty):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞. –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å –õ–∏—Ü–æ > –î–æ–ª–∂–Ω–æ—Å—Ç—å > –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"""
    type = models.ForeignKey('CounterpartyType', default=3, on_delete=models.CASCADE, blank=True, null=True, )
    name = models.CharField(max_length=255, verbose_name='')
    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children', verbose_name='–û—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    prev_org = TreeForeignKey('Organization', on_delete=models.CASCADE, null=True, blank=True, related_name='renamed', verbose_name='–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    prev_pos = TreeForeignKey('Person', on_delete=models.CASCADE, null=True, blank=True, related_name='relocated', verbose_name='–ü—Ä–µ–¥—ã–¥—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è')

    def get_full_name(self):
        if self.parent:
            return f"{self.name} ‚ù± {self.parent.get_full_name()}"
        if str(self.type) == "–õ–∏—Ü–æ":
            return f"üî• {self.name}"
        return f"{self.name}"

    def get_list_name(self):
        return f"{self.type.mini} {self.get_full_name()}"

    get_list_name.short_description = '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã'

    def __str__(self):
        return self.get_list_name()

    def get_extension_url(self):
        url = f"/admin/letters/{self.type.url}/{self.pk}"
        return url

    def get_link_name(self):
        return mark_safe(f"<a href={self.get_extension_url()}>{self.name}</a>")

    get_link_name.short_description = ''

    class Meta:
        verbose_name = '–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç'
        verbose_name_plural = '      –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—ã'

    class MPTTMeta:
        order_insertion_by = ('name',)


class Organization(Counterparty):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —É—Ä–æ–≤–Ω—è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è"""
    class Meta:
        proxy = True
        verbose_name = '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é'
        verbose_name_plural = f'     {menu_indent}üè¶ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'
        # ordering = ('name',)

    def save(self, *args, **kwargs):
        self.type = CounterpartyType.objects.get(pk=1)
        super(Organization, self).save()
        if re.findall(r'–ü—Ä–æ–∫—É—Ä–∞—Ç—É—Ä–∞', self.name, flags=re.I):
            Position.objects.create(name='–ü—Ä–æ–∫—É—Ä–æ—Ä', parent=self)
            Position.objects.create(name='–ò.–û. –ø—Ä–æ–∫—É—Ä–æ—Ä–∞', parent=self)
            Position.objects.create(name='1–π –∑–∞–º. –ø—Ä–æ–∫—É—Ä–æ—Ä–∞', parent=self)
            Position.objects.create(name='2–π –∑–∞–º. –ø—Ä–æ–∫—É—Ä–æ—Ä–∞', parent=self)


class Position(Counterparty):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —É—Ä–æ–≤–Ω—è –î–æ–ª–∂–Ω–æ—Å—Ç—å"""
    class Meta:
        proxy = True
        verbose_name = '–¥–æ–ª–∂–Ω–æ—Å—Ç—å'
        verbose_name_plural = f'    {menu_indent}üíº –î–æ–ª–∂–Ω–æ—Å—Ç–∏'
        # ordering = ('name',)

    def save(self, *args, **kwargs):
        self.type = CounterpartyType.objects.get(pk=2)
        super(Position, self).save()

    def __str__(self):
        return f"{self.name} ({self.parent.name})"

    # get_full_name.short_description = '–î–æ–ª–∂–Ω–æ—Å—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏'


class Person(Counterparty):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–æ–≤ —É—Ä–æ–≤–Ω—è –õ–∏—Ü–æ"""
    class Meta:
        proxy = True
        verbose_name = '–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ'
        verbose_name_plural = f'   {menu_indent}üë§ –õ–∏—Ü–∞'
        # ordering = ('name',)

    def save(self, *args, **kwargs):
        self.type = CounterpartyType.objects.get(pk=3)
        super(Person, self).save()

    def __str__(self):
        return self.get_full_name()


"""___________________________–ú–û–î–ï–õ–ò –ü–ò–°–ï–ú___________________________"""


def get_upload_path(instance, filename):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–∫–∞–Ω–∞ –ø–∏—Å—å–º–∞, –∏—Å—Ö–æ–¥—è –∏–∑ –≥–æ–¥–∞ –ø–∏—Å—å–º–∞ –∏ –∏–º–µ–Ω–∏ –ø–æ–¥–∫–∞–ª–æ–≥–¥–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∏—Å–µ–º"""
    return f"{instance.sign_date.year}/{instance.type.folder}/{filename}"


class BaseLetter(MPTTModel):
    """–ú–æ–¥–µ–ª—å, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤—Å–µ –≤–∏–¥—ã –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Ç–∏–ø—ã –ø–∏—Å–µ–º. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã
    –ø–∏—Å–µ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ —É–∑–ª—ã –¥–µ—Ä–µ–≤–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ (–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ mptt). –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–∞—è —Ñ–æ—Ä–º–∞ –≤ –∞–¥–º–∏–Ω–∫–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç
    –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è type (–¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö - –æ–¥–Ω–∞ —Ñ–æ—Ä–º–∞, –¥–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö - –¥—Ä—É–≥–∞—è, –¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤ - —Ç—Ä–µ—Ç—å—è –∏ —Ç.–ø."""
    type = models.ForeignKey('LetterType', on_delete=models.CASCADE, blank=True, null=True, )
    out_type = models.ForeignKey('OutgoingType', on_delete=models.PROTECT, blank=True, null=True, default=1)
    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children', verbose_name='–û—Ç–≤–µ—Ç –Ω–∞')
    number = models.CharField(max_length=64, unique=True, verbose_name='–ù–æ–º–µ—Ä')
    counterparty = TreeForeignKey('Counterparty', on_delete=models.CASCADE, verbose_name='–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç')
    subj = models.TextField(null=True, blank=True, verbose_name='–¢–µ–º–∞ –ø–∏—Å—å–º–∞')
    sign_date = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–∏—Å—å–º–∞')
    way_of_delivery = models.ForeignKey('WayOfDelivery', blank=True, null=True, on_delete=models.CASCADE, verbose_name='–°–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏')

    executor = models.ManyToManyField('Executor', blank=True, verbose_name='–ü–æ–¥–ø–∏—Å–∞–Ω–æ/–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
    inbound_number = models.CharField(max_length=128, blank=True, null=True, verbose_name='–í—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä')
    outgoing_number = models.CharField(max_length=64, blank=True, null=True, verbose_name='–ò—Å—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä')
    signed_by = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ü–æ–¥–ø–∏—Å–∞–Ω–æ')
    contact = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤ –≥–æ—Å–æ—Ä–≥–∞–Ω–µ')
    receive_date = models.DateField(blank=True, null=True, verbose_name='–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è')
    send_date = models.DateField(blank=True, null=True, verbose_name='–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')

    thematics = TreeManyToManyField('Thematics', blank=True, verbose_name='–¢–µ–º–∞')
    geotag = TreeManyToManyField('GeoTag', blank=True, verbose_name='–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞')
    cad_num = models.ManyToManyField('CadNum', blank=True, verbose_name='–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –ù–æ–º–µ—Ä–∞',)
    forestry = TreeManyToManyField('Forestry', blank=True, verbose_name='–û–±—ä–µ–∫—Ç –õ–µ—Å–Ω–æ–≥–æ –§–æ–Ω–¥–∞')
    waterobj = TreeManyToManyField('WaterObj', blank=True, verbose_name='–í–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç')
    cipher = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã')

    tiff_file = models.FileField(blank=True, null=True, upload_to=get_upload_path, verbose_name='–§–∞–π–ª TIFF')
    pdf_file = models.FileField(blank=True, null=True, upload_to=get_upload_path, verbose_name='–§–∞–π–ª PDF')
    pagemaker_file = models.FileField(blank=True, null=True, upload_to=get_upload_path, verbose_name='–§–∞–π–ª Pagemaker')

    completed = models.BooleanField(default=False, verbose_name='–ó–∞–≤–µ—Ä—à–µ–Ω–æ (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–π –≤–µ—Ç–∫–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏)')
    inaction = models.BooleanField(default=False, verbose_name='–ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ')

    class Meta:
        verbose_name = '–ü–∏—Å—å–º–æ'
        verbose_name_plural = '        –í—Å–µ –ø–∏—Å—å–º–∞'

    def get_full_name(self):
        if self.type:
            counterparty = self.counterparty.name[:50] if self.counterparty else ''
            counterparty = counterparty + ("..." if len(self.counterparty.name) > 50 else '')
            subject = self.subj[:80] if self.subj else ''
            subject = subject + ('...' if len(subject) > 80 else '')
            return f"{'üìå ' if self.inaction else ''}{self.type.abbr} {self.number} ‚ù± {self.sign_date} ‚ù± {counterparty} ‚ù± {subject}"
        return self.number

    get_full_name.short_description = '–ü–∏—Å—å–º–∞'

    def __str__(self):
        if self.type:
            return self.get_full_name()
        return self.number

    def get_extension_url(self):
        url = f"/admin/letters/{self.type.url}/{self.pk}"
        return url

    def get_link_name(self):
        return mark_safe(f"<a href={self.get_extension_url()}>{self.get_full_name()}</a>")

    class MPTTMeta:
        order_insertion_by = ['-sign_date']

    def save(self, *args, recurse=True, **kwargs):
        """ –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ –≤—Å–µ–π –≤–µ—Ç–∫–µ –ø–∏—Å–µ–º"""
        super(BaseLetter, self).save()
        if recurse:
            family = BaseLetter.objects.get(pk=self.pk).get_family()
            for relative in family:
                if relative.pk != self.pk:
                    if relative.completed != self.completed:
                        relative.completed = self.completed
                    if self.out_type:
                        relative.out_type = OutgoingType.objects.get(pk=self.out_type_id)
                    relative.save(recurse=False)


class OutEcoLetter(BaseLetter):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ò–°–•–û–î–Ø–©–ò–• –ø–∏—Å–µ–º"""
    class Meta:
        proxy = True
        verbose_name = '–ò—Å—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ'
        verbose_name_plural = f'       {menu_indent}üì® –ò—Å—Ö–æ–¥—è—â–∏–µ'  # –æ—Ç—Å—Ç—É–ø –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ.

    def save(self, *args, **kwargs):
        self.type = LetterType.objects.get(pk=2)
        super(OutEcoLetter, self).save()


class IncomingLetter(BaseLetter):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –í–•–û–î–Ø–©–ò–• –ø–∏—Å–µ–º"""
    class Meta:
        proxy = True
        verbose_name = '–í—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ'
        verbose_name_plural = f'       {menu_indent}üì© –í—Ö–æ–¥—è—â–∏–µ'  # –æ—Ç—Å—Ç—É–ø –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∞–¥–º–∏–Ω–∫–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—É–Ω–∫—Ç–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ.

    def save(self, *args, **kwargs):
        self.type = LetterType.objects.get(pk=1)
        if self.parent:  # TODO –Ω–∞–¥–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ, –¥–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Å—É–Ω—É—Ç—å –≤ BaseLetter
            if self.parent.out_type:
                self.out_type = OutgoingType.objects.get(pk=self.parent.out_type_id)
        super(IncomingLetter, self).save()


class OmittedRedirect(BaseLetter):
    """–°–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—á–∞—è –Ω–∞ –ø–∏—Å—å–º–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –µ–≥–æ –¥—Ä—É–≥–æ–º—É –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç—É (–≤—ã—Å—è—Å–Ω—è–µ—Ç—Å—è –æ–±—ã—á–Ω–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ,
     –∫–∞–∫ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç–∞."""
    class Meta:
        proxy = True
        verbose_name = '–ù–µ–ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Å—ã–ª'
        verbose_name_plural = f'       {menu_indent}üó∞ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'

    def save(self, *args, **kwargs):
        self.type = LetterType.objects.get(pk=3)
        if self.parent:
            if self.parent.out_type:
                self.out_type = OutgoingType.objects.get(pk=self.parent.out_type_id)
        super(IncomingLetter, self).save()


class LetterType(models.Model):
    index = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=127)
    abbr = models.CharField(max_length=8)
    folder = models.CharField(default='TMP', max_length=127)
    url = models.CharField(max_length=127)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–¢–∏–ø –ø–∏—Å—å–º–∞'
        verbose_name_plural = '–¢–∏–ø—ã –ø–∏—Å–µ–º'


class Attachment(models.Model):
    """–ò–Ω–æ–≥–¥–∞ –∫ –ø–∏—Å—å–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–ª–æ–∂–∏—Ç—å –µ—â–µ –∫–∞–∫–æ–π-–ª–∏–±–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"""
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    attached_to = models.ForeignKey('BaseLetter', on_delete=models.PROTECT, verbose_name='–ü–∏—Å—å–º–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
    file = models.FileField(upload_to='ATTACHMENTS', verbose_name='–§–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

    def __str__(self):
        return ''

    class Meta:
        verbose_name = '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç'
        verbose_name_plural = '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
