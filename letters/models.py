from .models_cats import *
from .models_ctrp import *
from django.utils.safestring import mark_safe


def get_upload_path(instance, filename):
    return f"{instance.sign_date.year}/{instance.type.folder}/{filename}"


class BaseLetter(MPTTModel):
    type = models.ForeignKey('LetterType', on_delete=models.CASCADE, blank=True, null=True, )
    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children', verbose_name='–û—Ç–≤–µ—Ç –Ω–∞')
    number = models.CharField(max_length=64, unique=True, verbose_name='–ù–æ–º–µ—Ä')
    counterparty = TreeForeignKey('Counterparty', on_delete=models.CASCADE, verbose_name='–ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç')
    subj = models.TextField(null=True, blank=True, verbose_name='–¢–µ–º–∞ –ø–∏—Å—å–º–∞')
    sign_date = models.DateField(verbose_name='–î–∞—Ç–∞ –ø–∏—Å—å–º–∞')
    way_of_delivery = models.ForeignKey('WayOfDelivery', blank=True, null=True, on_delete=models.CASCADE, verbose_name='–°–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏')

    executor = models.ManyToManyField('Executor', blank=True, verbose_name='–ü–æ–¥–ø–∏—Å–∞–Ω–æ/–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å')
    inbound_number = models.CharField(max_length=128, blank=True, null=True, verbose_name='–í—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä')
    outgoing_number = models.CharField(max_length=64, blank=True, null=True, verbose_name='–ò—Å—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä')
    signed_by = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ü–æ–¥–ø–∏—Å–∞–Ω–æ')
    contact = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –≤ –≥–æ—Å–æ—Ä–≥–∞–Ω–µ')
    receive_date = models.DateField(blank=True, null=True, verbose_name='–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è')
    send_date = models.DateField(blank=True, null=True, verbose_name='–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')

    thematics = TreeManyToManyField('Thematics', blank=True, verbose_name='–¢–µ–º–∞')
    geotag = TreeManyToManyField('GeoTag', blank=True, verbose_name='–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–≤—è–∑–∫–∞')
    cad_num = models.ManyToManyField('CadNum', blank=True, verbose_name='–ö–∞–¥–∞—Å—Ç—Ä–æ–≤—ã–µ –ù–æ–º–µ—Ä–∞',)
    forestry = TreeManyToManyField('Forestry', blank=True, verbose_name='–û–±—ä–µ–∫—Ç –õ–µ—Å–Ω–æ–≥–æ –§–æ–Ω–¥–∞')
    waterobj = TreeManyToManyField('WaterObj', blank=True, verbose_name='–í–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç')
    cipher = models.CharField(max_length=255, blank=True, null=True, verbose_name='–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–º—ã')

    tiff_file = models.FileField(blank=True, null=True, upload_to=f"OUT", verbose_name='–§–∞–π–ª TIFF')
    pdf_file = models.FileField(blank=True, null=True, upload_to=get_upload_path, verbose_name='–§–∞–π–ª PDF')
    pagemaker_file = models.FileField(blank=True, null=True, upload_to=f"OUT", verbose_name='–§–∞–π–ª Pagemaker')

    completed = models.BooleanField(default=False, verbose_name='–ó–∞–≤–µ—Ä—à–µ–Ω–æ (–ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–π –≤–µ—Ç–∫–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏)')
    inaction = models.BooleanField(default=False, verbose_name='–ë–µ–∑–¥–µ–π—Å—Ç–≤–∏–µ')

    class Meta:
        verbose_name = '–ü–∏—Å—å–º–æ'
        verbose_name_plural = '        –í—Å–µ –ø–∏—Å—å–º–∞'

    def get_full_name(self):
        if self.type:
            counterparty = self.counterparty.name[:50] if self.counterparty else ''
            counterparty = counterparty + ("..." if len(self.counterparty.name) > 50 else '')
            subject = self.subj[:80] if self.subj else ''
            subject = subject + ('...' if len(subject) > 80 else '')
            return f"{'üìå ' if self.inaction else ''}{self.type.abbr} {self.number} ‚ù± {self.sign_date} ‚ù± {counterparty} ‚ù± {subject}"
        return self.number

    get_full_name.short_description = '–ü–∏—Å—å–º–∞'


    def get_link_name(self):
        return mark_safe(f"<a href={self.get_extension_url()}>{self.get_full_name()}</a>")


    def __str__(self):
        if self.type:
            return self.get_full_name()
        return self.number

    def get_extension_url(self):
        url = f"/admin/letters/{self.type.url}/{self.pk}"
        return url

    class MPTTMeta:
        order_insertion_by = ['-sign_date']

    def save(self, *args, recurse=True, **kwargs):
        """ –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ –≤—Å–µ–π –≤–µ—Ç–∫–µ –ø–∏—Å–µ–º"""
        print(self.pdf_file)

        super(BaseLetter, self).save()
        if recurse:
            family = BaseLetter.objects.get(pk=self.pk).get_family()
            for relative in family:
                if relative.pk != self.pk and relative.completed != self.completed:
                    relative.completed = self.completed
                    relative.save(recurse=False)


class OutEcoLetter(BaseLetter):
    """ –ò–°–•–û–î–Ø–©–ò–ï """

    class Meta:
        proxy = True
        verbose_name = '–ò—Å—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ (—ç–∫–æ–ª–æ–≥–∏—è)'
        verbose_name_plural = f'       {my_indent}üì® –ò—Å—Ö–æ–¥—è—â–∏–µ (—ç–∫–æ)'

    def save(self, *args, **kwargs):
        self.type = LetterType.objects.get(pk=2)
        super(OutEcoLetter, self).save()


class IncomingLetter(BaseLetter):
    """ –í–•–û–î–Ø–©–ò–ï """
    class Meta:
        proxy = True
        verbose_name = '–í—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ'
        verbose_name_plural = f'       {my_indent}üì© –í—Ö–æ–¥—è—â–∏–µ'

    def save(self, *args, **kwargs):
        self.type = LetterType.objects.get(pk=1)
        super(IncomingLetter, self).save()


class OmittedRedirect(BaseLetter):
    """ –ù–µ–ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ """
    class Meta:
        proxy = True
        verbose_name = '–ù–µ–ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Å—ã–ª'
        verbose_name_plural = f'       {my_indent}üó∞ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'

    def save(self, *args, **kwargs):
        self.type = LetterType.objects.get(pk=3)
        super(IncomingLetter, self).save()


class LetterType(models.Model):
    index = models.IntegerField(primary_key=True)
    name = models.CharField(max_length=127)
    abbr = models.CharField(max_length=8)
    folder = models.CharField(default='TMP', max_length=127)
    url = models.CharField(max_length=127)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = '–¢–∏–ø –ø–∏—Å—å–º–∞'
        verbose_name_plural = '–¢–∏–ø—ã –ø–∏—Å–µ–º'


class Attachment(models.Model):
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    attached_to = models.ForeignKey('BaseLetter', on_delete=models.PROTECT, verbose_name='–ü–∏—Å—å–º–æ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –¥–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
    file = models.FileField(upload_to='ATTACHMENTS', verbose_name='–§–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')

    def __str__(self):
        return ''

    class Meta:
        verbose_name = '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç'
        verbose_name_plural = '–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'

